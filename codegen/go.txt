{{- with $root := . -}}
// --- WARNING ---
// Generated code!  Do not modify by hand.
// --- WARNING ---
//
// Generated by https://github.com/chronos-tachyon/pyooq

package {{.PackageName}}

import (
	"github.com/chronos-tachyon/pyooq/schema"
	"github.com/chronos-tachyon/pyooq/types"
)

{{- range $table := $root.Schema.Tables}}
type {{TableTypeName $root.SchemaName $table}} struct {
{{- range $column := $table.Columns}}
	{{ColumnFieldName $column}} schema.Column
{{- end}}
}

func (t {{TableTypeName $root.SchemaName $table}}) Name() string {
	return "{{TableSQLName $table}}"
}

func (t {{TableTypeName $root.SchemaName $table}}) NumColumns() uint {
	return {{len $table.Columns}}
}

func (t {{TableTypeName $root.SchemaName $table}}) ForEachColumn(consumer schema.ColumnConsumer) {
{{- range $column := $table.Columns}}
	consumer.Consume(t.{{ColumnFieldName $column}})
{{- end}}
}

var _ schema.Table = {{TableTypeName $root.SchemaName $table}}{}
{{- end}}

type {{SchemaTypeName $root.SchemaName}} struct {
{{- range $table := $root.Schema.Tables}}
	{{TableFieldName $table}} {{TableTypeName $root.SchemaName $table}}
{{- end}}
}

func (s {{SchemaTypeName $root.SchemaName}}) NumTables() uint {
	return {{len $root.Schema.Tables}}
}

func (s {{SchemaTypeName $root.SchemaName}}) ForEachTable(consumer schema.TableConsumer) {
{{- range $table := $root.Schema.Tables}}
	consumer.Consume(s.{{TableFieldName $table}})
{{- end}}
}

var _ schema.Schema = {{SchemaTypeName $root.SchemaName}}{}

var {{SchemaVarName $root.SchemaName}} = {{SchemaTypeName $root.SchemaName}}{
{{- range $table := $root.Schema.Tables}}
	{{TableFieldName $table}}: {{TableTypeName $root.SchemaName $table}}{
{{- range $column := $table.Columns}}
		{{ColumnFieldName $column}}: schema.MakeColumn("{{ColumnSQLName $column}}", {{$column.Type.GoString}}),
{{- end}}
	},
{{- end}}
}
{{- end}}
{{- /* vim:set ft=gotexttmpl ts=8 sts=8 sw=8 noet: */}}
